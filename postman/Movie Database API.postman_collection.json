{
	"info": {
		"_postman_id": "a5dd5879-f11e-4741-8dc8-44c539f6ddef",
		"name": "Movie Database API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11061725"
	},
	"item": [
		{
			"name": "Genres",
			"item": [
				{
					"name": "Create Genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 201\", () => pm.response.to.have.status(201));",
									"const json = pm.response.json();",
									"pm.expect(json).to.be.an('object');",
									"pm.expect(json.id, \"has id\").to.exist;",
									"pm.environment.set(\"genreId\", json.id);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Crime\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Genres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Crime\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Genre By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Crime\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/genres/{{genreId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres",
								"{{genreId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Genre Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Crime & Mystery\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/genres/{{genreId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres",
								"{{genreId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Try to change Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"ID did not change\", () => {",
									"  const id = pm.response.json().id;",
									"  pm.expect(id).to.eql(Number(pm.environment.get(\"genreId\")));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": 999999, \"name\": \"Action (renamed)\" }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/genres/{{genreId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres",
								"{{genreId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Genres - Paged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const j = pm.response.json();",
									"pm.expect(j).to.have.property(\"content\");",
									"pm.expect(j).to.have.property(\"size\");",
									"pm.expect(j).to.have.property(\"number\");",
									"pm.expect(j).to.have.property(\"totalElements\");",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/genres?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Genres - Invalid pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 400\", () => pm.response.to.have.status(400));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/genres?page=-1&size=99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres"
							],
							"query": [
								{
									"key": "page",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is either 204 or 400\", () => {",
									"  pm.expect([204,400]).to.include(pm.response.code);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Crime & Mystery\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/genres/{{genreId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres",
								"{{genreId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Force Delete Genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 204 or 404 (already deleted)\", () => {",
									"  pm.expect([204,404]).to.include(pm.response.code);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Crime & Mystery\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/genres/{{genreId}}?force=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres",
								"{{genreId}}"
							],
							"query": [
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Actors",
			"item": [
				{
					"name": "Create Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 201\", () => pm.response.to.have.status(201));",
									"const json = pm.response.json();",
									"pm.expect(json).to.be.an('object');",
									"pm.expect(json.id, \"has id\").to.exist;",
									"pm.environment.set(\"actorId\", json.id);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Keanu Reeves\", \"birthDate\": \"1964-09-02\" }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Invalid Date\", \"birthDate\": \"1990-13-32\" }\n\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors?name=KeAnu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors"
							],
							"query": [
								{
									"key": "name",
									"value": "KeAnu"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors/{{actorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Actor Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{ \"name\": \"Keanu R.\" }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors/{{actorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Try to change ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"ID did not change\", () => {",
									"  const id = pm.response.json().id;",
									"  pm.expect(id).to.eql(Number(pm.environment.get(\"actorId\")));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": 999999, \"name\": \"Keanu R.\", \"birthDate\": \"1964-09-02\" }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors/{{actorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Actor - invalid birthDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 400\", () => pm.response.to.have.status(400));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Invalid Date\", \"birthDate\": \"1990-13-32\" }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actors - Paged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const j = pm.response.json();",
									"pm.expect(j).to.have.property(\"content\");",
									"pm.expect(j).to.have.property(\"size\");",
									"pm.expect(j).to.have.property(\"number\");",
									"pm.expect(j).to.have.property(\"totalElements\");",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/actors?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actors - Invalid pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 400\", () => pm.response.to.have.status(400));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/actors?page=-1&size=99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors"
							],
							"query": [
								{
									"key": "page",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is either 204 or 400\", () => {",
									"  pm.expect([204,400]).to.include(pm.response.code);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{ \"name\": \"Keanu R.\" }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors/{{actorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Force Delete Actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 204 or 404 (already deleted)\", () => {",
									"  pm.expect([204,404]).to.include(pm.response.code);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{ \"name\": \"Keanu R.\" }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/actors/{{actorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "Create Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"pm.test(\"Status is 201\", () => pm.response.to.have.status(201));",
									"const json = pm.response.json();",
									"pm.environment.set(\"movieId\", json.id);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"title\": \"Sample Movie\", \"releaseYear\": 2010, \"duration\": 120 }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies/{{movieId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movies - Paged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const page = pm.response.json();",
									"pm.expect(page).to.have.property(\"content\");",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter Movies By Genre - Paged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies?genre={{genreId}}&page=0&size=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "genre",
									"value": "{{genreId}}"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter Movies By Year - Paged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies?year=2010&page=0&size=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "year",
									"value": "2010"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter Movies By Actor - Paged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies?actor={{actorId}}&page=0&size=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "actor",
									"value": "{{actorId}}"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie By Title - Paged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies/search?title=matrix&page=0&size=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies",
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "matrix"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"title\": \"Sample Movie (v2)\", \"duration\": 125 }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies/{{movieId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Try to change Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"ID did not change\", () => {",
									"  const id = pm.response.json().id;",
									"  pm.expect(id).to.eql(Number(pm.environment.get(\"movieId\")));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": 999999, \"title\": \"Matrix (edited)\" }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies/{{movieId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actors For A Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies/{{movieId}}/actors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 400\", () => pm.response.to.have.status(400));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies?page=-1&size=99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							],
							"query": [
								{
									"key": "page",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "99999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is either 204 or 400\", () => {",
									"  pm.expect([204,400]).to.include(pm.response.code);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies/{{movieId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Force Delete Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 204 or 404 (already deleted)\", () => {",
									"  pm.expect([204,404]).to.include(pm.response.code);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies/{{movieId}}?force=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}"
							],
							"query": [
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NegativeCases",
			"item": [
				{
					"name": "Get Non-Existent Genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/genres/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"genres",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Movie With Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const base = pm.environment.get('baseUrl') || pm.variables.get('baseUrl');",
									"",
									"pm.test(\"Status is 400\", () => pm.response.to.have.status(400));",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"title\": \"\", \"releaseYear\": 1800, \"duration\": 0 }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/movies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "genreId",
			"value": ""
		}
	]
}